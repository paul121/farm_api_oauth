<?php

/**
 * @file
 * Farm API OAuth Module.
 */

/**
 * Implements hook_menu().
 */
function farm_api_oauth_menu(){
  $items = array();
  $items['api/authorized'] = [
    'title'            => 'farmOS API Client Authorized',
    'description'      => 'Callback page for authorized farmOS API Clients.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('farm_api_oauth_authorized_form'),
    'access arguments' => ['Use OAuth2 Server'],
  ];

  return $items;
}

/**
 * Implements hook_form().
 * Callback page after authorizing OAuth2 farmOS API Clients.
 */
function farm_api_oauth_authorized_form($form, &$form_state){
  global $base_root;
  $request_url = $base_root . request_uri();

  $params = drupal_get_query_parameters();

  $access_token = '123456789';

  $form['redirect_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect URI'),
    '#description' => t('Copy this link which includes the following values:'),
    '#default_value' => $request_url,
    '#attributes' => array('readonly' => 'readonly'),
  );

  $form['authorization_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorization Code'),
    '#description' => t('Use the Authorization Code to get an Access Token.'),
    '#default_value' => $params['code'],
    '#attributes' => array('readonly' => 'readonly'),
    '#access' => isset($params['code']),
  );

  $form['access_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Access Token'),
    '#description' => t('Include this Token in an HTTP \'Bearer Authentication\' Header to access
      protected resources.'),
    '#default_value' => $access_token,
    '#attributes' => array('readonly' => 'readonly'),
    '#access' => isset($params['access_token']),
  );

  $form['access_token_expiration'] = array(
    '#type' => 'textfield',
    '#title' => t('Expires In'),
    '#description' => t('Seconds until expiration.'),
    '#default_value' => $access_token,
    '#attributes' => array('readonly' => 'readonly'),
    '#access' => isset($params['expires_in']),
  );

  $form['token_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Token Type'),
    '#description' => t('Bearer by default.'),
    '#default_value' => $access_token,
    '#attributes' => array('readonly' => 'readonly'),
    '#access' => isset($params['token_type']),
  );

  $form['scope'] = array(
    '#type' => 'textfield',
    '#title' => t('Scope'),
    '#description' => t('Authorized OAuth2 Scopes'),
    '#default_value' => $access_token,
    '#attributes' => array('readonly' => 'readonly'),
    '#access' => isset($params['scope']),
  );

  $form['state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#description' => t('Include this in your header to maintain CORS.'),
    '#default_value' => $params['state'],
    '#attributes' => array('readonly' => 'readonly'),
    '#access' => isset($params['state']),
  );

  return $form;
}

/**
 * Implements oauth2_server_default_scope().
 */
function farm_api_oauth_oauth2_server_default_scope($server) {
  // Grant "farm_restws_access" by default.
  if ($server->name == 'farmos_oauth') {
    return array('farmos_restws_access');
  }
}

/**
 * Implements hook_enable().
 */
function farm_api_oauth_enable(){
  // Set variables for restws_oauth2_server configuration.
  $server_name = 'farmos_oauth';
  variable_set('restws_oauth2_server_name', $server_name);
  $scope_name = 'farmos_restws_access';
  variable_set('restws_oauth2_server_scope', $scope_name);

  // Create an OAuth2 Server.
  $server = entity_create('oauth2_server', array());
  $server->name = $server_name;
  $server->label = 'Farm OAuth Server';
  $server->settings = array(
    'default_scope' => $scope_name,
    'enforce_state' => TRUE,
    'allow_implicit' => TRUE,
    'use_openid_connect' => FALSE,
    'use_crypto_tokens' => FALSE,
    'store_encrypted_token_string' => FALSE,
    'require_exact_redirect_uri' => TRUE,
    'grant_types' => array(
      'authorization_code' => 'authorization_code',
      'client_credentials' => 'client_credentials',
      //'urn:ietf:params:oauth:grant-type:jwt-bearer' => 'urn:ietf:params:oauth:grant-type:jwt-bearer',
      'refresh_token' => 'refresh_token',
      'password' => 'password',
    ),
    'always_issue_new_refresh_token' => TRUE,
    'access_lifetime' => 3600,
    'id_lifetime' => 3600,
    'refresh_token_lifetime' => 1209600,
  );
  $server->save();

  // Create an OAuth2 Scope for restws access.
  $scope = entity_create('oauth2_server_scope', array());
  $scope->server = $server->name;
  $scope->name = $scope_name;
  $scope->description = 'Access farmOS restws endpoints.';
  $scope->save();



  // Create an OAuth2 Client for general Farm API access.
  $client = entity_create('oauth2_server_client', array());
  $client->server = $server->name;
  $client->label = 'farmOS API';
  $client->client_key = 'farmos_api_client';
  $client->client_secret = oauth2_server_hash_client_secret('client_secret');
  //$client->public_key = $this->public_key;
  // The module supports entering multiple redirect uris separated by a
  // newline. Both a dummy and the real uri are specified to confirm that
  // validation passes.
  $client->redirect_uri = url('api/authorized', array('absolute' => TRUE));
  $client->automatic_authorization = FALSE;
  $client->save();
}

/**
 * Implements hook_disable().
 */
function farm_api_oauth_disable(){
  // Assume that the user does not change the OAuth2 Server or Scope
  // because they are using this module with farmOS. Otherwise this could
  // potentially delete other configured OAuth2 Servers and Scopes.
  $server_name = variable_get('restws_oauth2_server_name');
  $scope_name = variable_get('restws_oauth2_server_scope');

  // Delete OAuth2 Entities.
  entity_delete('oauth2_server_client', 'farmos_api_client');
  entity_delete('oauth2_server_scope', $scope_name);
  entity_delete('oauth2_server', $server_name);
}
